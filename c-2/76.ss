;; 对于 *带有显示分派的通用性操作* 添加新的类型最为复杂
;; 因为彼此之间的api并不通用 所以在通用性操作中(既使用这些数据的API)需要对每一个类型判断然后使用对应的API

;; 对于 *数据导向的风格* 添加新的类型较为简单
;; 因为彼此之间通过包封装API 所以可以保证API的一致性

;; 对于 *消息传递的风格* 添加新的类型较为简单
;; 因为对于每个单独的对象都在其自身上调用相应API 所以新旧类型互不干扰

;; 那种组织方式最适合经常加入新类型的系统?
;; 答: 个人认为 *消息传递的风格* 最为合适因为该风格实现起来更为简单 (XXXXXXXX)

;; 修改: 虽然 *消息传递的风格* 的实现较为简单 但由于其自身的耦合性(因为它总是在它自己上调用API)
;;      导致每当有新的操作需要添加时 其实例化旧对象就必须重新实例化
;;      对于 *数据导向的风格* 通过包添加新的操作是可行的